(function () {
    "use strict";

    var app = angular.module("geofeelings", ["ngRoute"]);

    app.config(function ($routeProvider) {
        $routeProvider
            .when("/admin", {
                templateUrl: "./controllers/adminController/admin.html"
            }).when("/search", {
                templateUrl: "./controllers/searchController/search.html"
            }).when("/intro", {
                templateUrl: "./controllers/introController/intro.html"
            }).when("/help", {
                templateUrl: "./directives/help.html"
            }).when("/login", {
                templateUrl: "./controllers/loginController/login.html"
            }).when("/register", {
                templateUrl: "./controllers/loginController/register.html"
            }).when("/password", {
                templateUrl: "./controllers/loginController/password.html"
            }).when("/user", {
                templateUrl: "./controllers/userController/user.html"
            }).when("/user/:param", {
                templateUrl: "./controllers/userController/user.html",
                controller: 'userController'
            }).when("/me", {
                templateUrl: "./controllers/userController/me.html"
            }).when("/event", {
                templateUrl: "./controllers/eventController/event.html"
            }).when("/addEvent", {
                templateUrl: "./controllers/eventController/addEvent.html"
            }).when("/location", {
                templateUrl: "./controllers/locationController/location.html"
            }).otherwise({
                redirectTo: "/intro"
            });
    });

    app.directive("searchresult", function () {
        return {
            restrict: 'E',
            templateUrl: 'directives/searchResult.html'
        }
    });

    app.service('sharedProperties', function () {
        var property = 'First';

        return {
            getProperty: function () {
                return property;
            },
            setProperty: function (value) {
                property = value;
            }
        }
    });

})();

/**
 * Created by Jonatan on 4/12/2015.
 */


(function () {
    "use strict";

    var eventController = function ($scope) {

    };

    angular.module("geofeelings").controller("eventController", ["$scope", eventController]);
})();
/**
 * Created by Jonatan on 1/12/2015.
 */

(function () {
    "use strict";

    var introController = function ($scope) {

    };

    angular.module("geofeelings").controller("introController", ["$scope", introController]);
})();
/**
 * Created by Jonatan on 6/12/2015.
 */

(function () {
    "use strict";

    var adminController = function ($scope) {

    };

    angular.module("geofeelings").controller("adminController", ["$scope", adminController]);
})();
/**
 * Created by Jonatan on 6/12/2015.
 */

(function () {
    "use strict";

    var locationController = function ($scope) {

    };

    angular.module("geofeelings").controller("locationController", ["$scope", locationController]);
})();
/**
 * Created by Jonatan on 21/11/2015.
 */

(function () {
    "use strict";

    var mainController = function ($scope) {
        if (navigator.geolocation) {
            $scope.image = "./assets/common.png";
            $scope.mapOptions = {
                zoom: 15,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                disableDefaultUI: true
            };

            $scope.map = new google.maps.Map(document.querySelector("#map"), $scope.mapOptions);

            navigator.geolocation.getCurrentPosition(function (position) {
                $scope.map.setCenter(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));
                $scope.marker = new google.maps.Marker({
                    position: $scope.map.getCenter(),
                    map: $scope.map,
                    icon: $scope.image
                });
            });
        } else {
            //throw exception
        }
    };

    angular.module("geofeelings").controller("mainController", ["$scope", mainController]);
})();
/**
 * Created by Jonatan on 26/11/2015.
 */

(function () {
    "use strict";

    var loginController = function ($scope) {

    };

    angular.module("geofeelings").controller("loginController", ["$scope", loginController]);
})();
/**
 * Created by Jonatan on 1/12/2015.
 */

(function () {
        "use strict";

        var userController = function ($scope, $location, searchService) {

            $scope.init = function () {
                var userid = $location.search().userid;
                searchService.searchFromId(userid).then(userFoundWithId);
                searchService.getSharesByUserId(userid).then(sharesFoundWithId);
            };

            var userFoundWithId = function (res) {
                    $scope.userfoundwithid = res;

                    $scope.map.setCenter(new google.maps.LatLng(res.lat, res.lon));
                    if ($scope.marker != undefined) {
                        $scope.marker.setMap(null); //verwijdert alle markers eerst
                    }
                    $scope.marker = new google.maps.Marker({
                        position: {lat: res.lat, lng: res.lon},
                        map: $scope.map,
                        icon: $scope.image
                    });
                }
                ;

            var sharesFoundWithId = function (res) {

                $scope.shareFoundWithUserId = res;


                //markers plaatsen en kaart verplaatsen naar hun gemiddelde
                var minLat = 100,
                    maxLat = 0,
                    minLng = 100,
                    maxLng = 0,
                    teller = 0,
                    gemLat = 0,
                    gemLng = 0;

                $scope.marker.setMap(null); //verwijdert alle markers eerst
                res.forEach(function (res) {
                    teller++;
                    if (res.lat < minLat) {
                        minLat = res.lat;
                    }
                    else if (res.lat > maxLat) {
                        maxLat = res.lat;
                    }

                    if (res.lng < minLng) {
                        minLng = res.lng;
                    }
                    else if (res.lng > maxLng) {
                        maxLng = res.lng;
                    }

                    $scope.marker = new google.maps.Marker({
                        position: {lat: res.lat, lng: res.lng},
                        map: $scope.map,
                        icon: $scope.image
                    });

                });

                if (teller == 1) {
                    gemLat = res[0].lat;
                    gemLng = res[0].lng;
                }
                else {
                    gemLat = (maxLat - minLat) / 2 + minLat;
                    gemLng = (maxLng - minLng) / 2 + minLng;
                }

                $scope.map.setCenter(new google.maps.LatLng(gemLat, gemLng));
                $scope.map.setZoom(12);
                //klaar met markers plaatsen en kaart verplaatsen naar hun gemiddelde
            };
        };

        angular.module("geofeelings").controller("userController", ["$scope", "$location", "searchService", userController]);
    })
();
/**
 * Created by Jonatan on 25/11/2015.
 */


(function () {
    "use strict";

    var searchController = function ($scope, searchService, sharedProperties) {

        $scope.searchModel = null;

        $scope.searchOnSubmit = function (formObj) {
            if ($scope.searchModel.length > 0) {
                searchNow();
            }
        };
        $scope.searchOnKeyPress = function () {
            if ($scope.searchModel != null) {
                searchNow();
            }
        };

        $scope.filterSearchResults = function (i) {
            if ($scope.searchModel === "") {
                return false;
            }

            if (i.title.toLowerCase().indexOf($scope.searchModel.toLocaleLowerCase()) >= 0) {
                return true;
            }
            if (i.description !== undefined) {
                if (i.description.toLowerCase().indexOf($scope.searchModel.toLocaleLowerCase()) >= 0) {
                    return true;
                }
            }

            return false;
        };


        var searchNow = function () {
            searchService.search($scope.searchModel).then(onResultsReady);
        };

        var onResultsReady = function (res) {
            $scope.searchResults = res;
        };

        var onResultsError = function (err) {
        };
    };

    angular.module("geofeelings").controller("searchController", ["$scope", "searchService","sharedProperties", searchController]);
})();
(function () {
    "use strict";

    var searchService = function ($http) {

        var search = function (searchString) {
            var url = './users.json';
            return $http.get(url).then(function (response) {

                var arSearchResults = [];
                angular.forEach(response.data.users.user, function (searchR) {
                    var newSR = new SearchResult(searchR.username, searchR.photoUrl, searchR.email, searchR._id.$oid);
                    arSearchResults.push(newSR);
                });
                return arSearchResults;
            });
        };

        var searchFromId = function (searchString) {
            var url = './users.json';
            return $http.get(url).then(function (response) {

                var userfound;
                angular.forEach(response.data.users.user, function (user) {
                    if (user._id.$oid == searchString) {
                        userfound = new GfUser(user._id.$oid, user.username, user.photoUrl, user.age, user.lat, user.lon);
                    }
                });
                return userfound;
            });
        };

        var getSharesByUserId = function(userid)
        {
            var url = './shares.json';
            return $http.get(url).then(function (response) {
                var sharesfound=[];
                angular.forEach(response.data.shares.share, function (share) {
                    if (share.userid == userid) {
                        var newShare = new GFShare(share._id.$oid, share.user, share.userid, share.time.$date, share.mood, share.lat, share.lng);
                        sharesfound.push(newShare);
                    }
                });
                return sharesfound;
            });
        };

        return {
            search: search,
            searchFromId: searchFromId,
            getSharesByUserId:getSharesByUserId
        };
    };
    angular.module("geofeelings").factory("searchService", ["$http", searchService]);
})();
function GFShare(id, user, userid, time, mood, lat, lng) {
    this.id = id;
    this.user = user;
    this.userid = userid;
    this.time = time;
    this.mood = mood;
    this.lat = lat;
    this.lng = lng;
}
GFShare.prototype.toString = function () {
    return this.user + " (" + this.time + ")";
};

function GfUser(id, username, photoUrl, age, lat, lon) {
    this.id = id;
    this.username = username;
    this.photoUrl = photoUrl;
    this.age = age;
    this.lat = lat;
    this.lon = lon;
}
GfUser.prototype.toString = function () {
    return this.username;
};

GfUser.prototype.agenow = function () {
    var birthday = new Date(this.age.date);
    var age = Date.now() - birthday;
    console.log(age);
};

function SearchResult(title, photoUrl, description, id)
{
    this.title = title;
    this.photoUrl = photoUrl;
    this.description = description;
    this.id = id;
}
SearchResult.prototype.toString = function() {
    return this.title;
}; 

/**
 * Created by Jonatan on 22/11/2015.
 */

//# sourceMappingURL=data:application/json;base64,
