(function () {
    "use strict";

    var app = angular.module("geofeelings", ["ngRoute"]);

    app.config(function ($routeProvider) {
        $routeProvider
            .when("/admin", {
                templateUrl: "./controllers/adminController/admin.html"
            }).when("/search", {
                templateUrl: "./controllers/searchController/search.html"
            }).when("/intro", {
                templateUrl: "./controllers/introController/intro.html"
            }).when("/help", {
                templateUrl: "./directives/help.html"
            }).when("/login", {
                templateUrl: "./controllers/loginController/login.html"
            }).when("/register", {
                templateUrl: "./controllers/loginController/register.html"
            }).when("/password", {
                templateUrl: "./controllers/loginController/password.html"
            }).when("/user", {
                templateUrl: "./controllers/userController/user.html"
            }).when("/user/:param", {
                templateUrl: "./controllers/userController/user.html",
                controller: 'userController'
            }).when("/me", {
                templateUrl: "./controllers/userController/me.html"
            }).when("/event", {
                templateUrl: "./controllers/eventController/event.html"
            }).when("/addEvent", {
                templateUrl: "./controllers/eventController/addEvent.html"
            }).when("/location", {
                templateUrl: "./controllers/locationController/location.html"
            }).when("/intro_shared", {
                templateUrl: "./controllers/introController/intro_shared.html"
            }).otherwise({
                redirectTo: "/intro"
            });
    });

    app.directive("searchresult", function () {
        return {
            restrict: 'E',
            templateUrl: 'directives/searchResult.html'
        };
    });

    app.service('sharedProperties', function () {
        var property = 'First';

        return {
            getProperty: function () {
                return property;
            },
            setProperty: function (value) {
                property = value;
            }
        };
    });

})();

/**
 * Created by Jonatan on 6/12/2015.
 */

(function () {
    "use strict";

    var adminController = function ($scope) {

    };

    angular.module("geofeelings").controller("adminController", ["$scope", adminController]);
})();
/**
 * Created by Jonatan on 4/12/2015.
 */


(function () {
    "use strict";

    var eventController = function ($scope) {

    };

    angular.module("geofeelings").controller("eventController", ["$scope", eventController]);
})();
/**
 * Created by Jonatan on 1/12/2015.
 */

(function () {
    "use strict";

    var introController = function ($scope, shareService, $http ) {


        //SMILEY TEKENEN
        $scope.sliderValue = 50;
        $scope.moodWord = null;
        var c = document.getElementById("smileyCanvas");
        var ctx = c.getContext("2d");

        var sadRGB = [152, 30, 30];
        var happyRGB = [70, 161, 73];

        //telkens slidervalue verandert gezichtje tekenen
        $scope.$watch("sliderValue", function () {
            ctx.clearRect(0, 0, c.width, c.height); //canvas clearen voor nieuw frame

            var mood = $scope.sliderValue;
            giveMoodWord();
            //offset positie mond
            var offsetX = c.width / 5;
            var offSetY = c.width / 2.14 + (mood / (c.width / 6));

            //variabelen voor beziercurve (= mond)
            var SPx = offsetX;
            var SPy = offSetY + c.width / 3 - (mood * (c.width / 376.66));
            var H1x = offsetX;
            var H1y = offSetY + (mood * (c.width / 250));
            var H2x = offsetX + ((c.width / 300) * 180);
            var H2y = offSetY + (mood * (c.width / 250));
            var EPx = offsetX + (c.width / 1.666);
            var EPy = offSetY + (c.width / 3) - (mood * (c.width / 376.66));

            //hoofd
            ctx.lineWidth = c.width / 60;
            ctx.beginPath();
            ctx.arc((c.width / 2), (c.width / 2), (c.width / 2.07), 0, 2 * Math.PI);
            ctx.fillStyle = "rgb(" + moodColor(0) + "," + moodColor(1) + "," + moodColor(2) + ")";
            ctx.fill();
            ctx.strokeStyle = 'white';
            ctx.stroke();

            //mond

            ctx.lineWidth = c.width / 30;
            ctx.beginPath();
            ctx.moveTo(SPx, SPy);
            ctx.bezierCurveTo(H1x, H1y, H2x, H2y, EPx, EPy);
            ctx.strokeStyle = 'black';
            ctx.stroke();
            ctx.lineCap = "round";

            //oog links

            ctx.lineWidth = c.width / 60;
            ctx.beginPath();
            ctx.arc(c.width / 3, c.width / 3, c.width / 15, 0, 2 * Math.PI);
            ctx.fillStyle = 'black';
            ctx.fill();
            ctx.stroke();

            //oog rechts
            ctx.beginPath();
            ctx.arc(c.width / 3 * 2, c.width / 3, c.width / 15, 0, 2 * Math.PI);
            ctx.fillStyle = 'black';
            ctx.fill();
            ctx.stroke();
        });

        var moodColor = function (c) {
            //c: R = 0, G = 1, B = 2

            if (sadRGB[c] > happyRGB[c]) {
                return Math.round(sadRGB[c] - ((sadRGB[c] - happyRGB[c]) * ($scope.sliderValue / 100)));
            }
            else {
                return Math.round(sadRGB[c] + ((happyRGB[c] - sadRGB[c]) * ($scope.sliderValue / 100)));
            }

        };

        var moodwords = ["horrible", "really bad", "bad", "okay", "good", "really good", "excellent"];

        var giveMoodWord = function () {
            if ($scope.sliderValue < 5) {
                $scope.moodWord = moodwords[0];
            }
            else if ($scope.sliderValue < 25) {
                $scope.moodWord = moodwords[1];
            }
            else if ($scope.sliderValue < 40) {
                $scope.moodWord = moodwords[2];
            }
            else if ($scope.sliderValue < 60) {
                $scope.moodWord = moodwords[3];
            }
            else if ($scope.sliderValue < 75) {
                $scope.moodWord = moodwords[4];
            }
            else if ($scope.sliderValue < 95) {
                $scope.moodWord = moodwords[5];
            }
            else {
                $scope.moodWord = moodwords[6];
            }
        };

        $http.get('/auth/user').success(function (data) {
            console.log(data);
            $scope.user = data;
        });

        $scope.postShare = function () {
            navigator.geolocation.getCurrentPosition(function (position) {
                var data = {
                    "userid": $scope.user._id,
                    "eventid": 0,
                    "time": new Date().toISOString(),
                    "mood": $scope.sliderValue,
                    "lat": position.coords.latitude,
                    "lng": position.coords.longitude
                };

                shareService.postShare(data);


            });
        };
    };

    angular.module("geofeelings").controller("introController", ["$scope", "shareService", "$http", introController]);
})();
/**
 * Created by Lienert on 21/12/2015.
 */

(function () {
    "use strict";

    var intro_sharedController = function ($scope, $http) {
        console.log( $scope.sharedShare);

    };
    angular.module("geofeelings").controller("intro_sharedController", ["$scope","$http", intro_sharedController]);
})();
/**
 * Created by Jonatan on 6/12/2015.
 */

(function () {
    "use strict";

    var locationController = function ($scope) {

    };

    angular.module("geofeelings").controller("locationController", ["$scope", locationController]);
})();
/**
 * Created by Jonatan on 26/11/2015.
 */

(function () {
    "use strict";

    var loginController = function ($scope, $http, $location) {
        $scope.login = function () {
            $http.post('http://localhost:3000/auth/login', {
                username : $scope.username,
                password : $scope.password
            }).success(function (data) {
                $scope.error = data.error;
                $location.path(data.redirect);
            });
        };

        $scope.register = function() {
            $http.post('http://localhost:3000/auth/register', {
                username : $scope.username,
                password : $scope.password,
                email : $scope.email
            }).success(function (data) {
                $scope.error = data.error;
                $location.path(data.redirect);
            });
        };
    };

    angular.module("geofeelings").controller("loginController", ["$scope", "$http", "$location", loginController]);
})();
/**
 * Created by Jonatan on 21/11/2015.
 */

(function () {
    "use strict";

    var mainController = function ($scope) {
        if (navigator.geolocation) {
            $scope.image = "./assets/location_now.png";
            $scope.mapOptions = {
                zoom: 15,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                disableDefaultUI: true
            };

            $scope.map = new google.maps.Map(document.querySelector("#map"), $scope.mapOptions);

            navigator.geolocation.getCurrentPosition(function (position) {
                $scope.map.setCenter(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));
                $scope.marker = new google.maps.Marker({
                    position: $scope.map.getCenter(),
                    map: $scope.map,
                    icon: $scope.image
                });
            });
        } else {
            //throw exception
        }
    };

    angular.module("geofeelings").controller("mainController", ["$scope", mainController]);
})();
/**
 * Created by Jonatan on 25/11/2015.
 */


(function () {
    "use strict";

    var searchController = function ($scope, searchService, sharedProperties) {

        $scope.searchModel = null;

        $scope.searchOnSubmit = function (formObj) {
            if ($scope.searchModel.length > 0) {
                searchNow();
            }
        };
        $scope.searchOnKeyPress = function () {
            if ($scope.searchModel !== null) {
                searchNow();
            }
        };

        $scope.filterSearchResults = function (i) {
            if ($scope.searchModel === "") {
                return false;
            }

            if (i.username.toLowerCase().indexOf($scope.searchModel.toLocaleLowerCase()) >= 0) {
                return true;
            }
            if (i.description !== undefined) {
                if (i.description.toLowerCase().indexOf($scope.searchModel.toLocaleLowerCase()) >= 0) {
                    return true;
                }
            }

            return false;
        };


        var searchNow = function () {
            searchService.search($scope.searchModel).then(onResultsReady);
        };

        var onResultsReady = function (res) {
            $scope.searchResults = res;
        };

        var onResultsError = function (err) {
        };
    };

    angular.module("geofeelings").controller("searchController", ["$scope", "searchService","sharedProperties", searchController]);
})();
/**
 * Created by Jonatan on 21/12/2015.
 */

(function () {
    "use strict";

    var meController = function ($scope, $http, $location, profileService, shareService, eventService) {
        profileService.getUser(function (err, user) {
            if (!err) {
                if (user.redirect) {
                    $location.path(user.redirect);
                } else {
                    $scope.user = user;
                    $scope.user.address1 = splitAddress(user.address, 0);
                    $scope.user.address2 = splitAddress(user.address, 1);

                    shareService.getSharesByUserId(user.id, function (err, shares) {
                        if(!err) {
                            if(shares.redirect) {
                                $location.path(shares.redirect);
                            } else {
                                angular.forEach(shares, function(share){
                                    if(share.eventid) {
                                        eventService.getEventById(share.eventid, function (err, event) {
                                            share.address = event.eventname;
                                        });
                                    } else {

                                    }
                                });

                                $scope.shares = shares;
                            }
                        } else {
                            console.log("> error shareService: " + err);
                        }
                    });
                }
            } else {
                console.log("> error profileService: " + err);
            }
        });

        $scope.save = function (user) {
            user.address = makeAddress(user.address1, user.address2);
            profileService.saveUser(user, function(err, data) {
                if(!err) {
                    if (data.redirect) {
                        $location.path(data.redirect);
                    } else {
                        $scope.user = data;
                        $scope.user.address1 = splitAddress(data.address, 0);
                        $scope.user.address2 = splitAddress(data.address, 1);
                    }
                } else {
                    console.log("> error: " + err);
                }
            });
        };

        $scope.logout = function () {
            profileService.logout().then(function (data) {
                $location.path(data);
            });
        };

        var splitAddress = function (address, part) {
            var split = address.split(",");
            return split[part];
        };

        var makeAddress = function (address1, address2) {
            return address1 + "," + address2;
        };
    };

    angular.module("geofeelings").controller("meController", ["$scope", "$http", "$location", "profileService", "shareService", "eventService", meController]);
})();
/**
 * Created by Jonatan on 1/12/2015.
 */

(function () {
    "use strict";

    var userController = function ($scope, $location, searchService, shareService, $routeParams) {

        $scope.init = function () {
            var userid = $routeParams.param;
            searchService.searchUserFromId(userid).then(userFoundWithId);
            shareService.getSharesByUserId(userid).then(sharesFoundWithId); //IMPLEMENTEREN ALS JONATAN DE API FTIE HEEFT AANGEMAAKT
        };

        var userFoundWithId = function (res) {
            $scope.userfoundwithid = res;

            if (res.lat !== undefined && res.lat !== undefined) {
                $scope.map.setCenter(new google.maps.LatLng(res.lat, res.lng));
                if ($scope.marker !== undefined) {
                    $scope.marker.setMap(null); //verwijdert alle markers eerst
                }
                $scope.marker = new google.maps.Marker({
                    position: {lat: res.lat, lng: res.lng},
                    map: $scope.map,
                    icon: $scope.image
                });
            }
        };



        $scope.test = function(share)
        {
            $scope.map.setCenter(new google.maps.LatLng(share.lat, share.lng));
            $scope.map.setZoom(19);
        };

        var giveFeelingsImageArrayNumber = function (res) {
            if (res.mood > 80) {
                return 4;
            }
            else {
                return Math.round(res.mood / 20);
            }
        };

        var sharesFoundWithId = function (res) {
            $scope.shareFoundWithUserId = res;

            //markers plaatsen en kaart verplaatsen naar hun gemiddelde
            var minLat = 100,
                maxLat = 0,
                minLng = 100,
                maxLng = 0,
                teller = 0,
                gemLat = 0,
                gemLng = 0;

            $scope.marker.setMap(null); //verwijdert alle markers eerst

            var feelingImages = ["depressed", "sad", "common", "happy", "excited"];

            res.forEach(function (res) {

                teller++;
                if (res.lat < minLat) {
                    minLat = res.lat;
                }
                if (res.lat > maxLat) {
                    maxLat = res.lat;
                }

                if (res.lng < minLng) {
                    minLng = res.lng;
                }
                if (res.lng > maxLng) {
                    maxLng = res.lng;
                }

                res.moodImageSource = "./assets/" + feelingImages[giveFeelingsImageArrayNumber(res)] + ".png";

                $scope.marker = new google.maps.Marker({
                    position: {lat: res.lat, lng: res.lng},
                    map: $scope.map,
                    icon: res.moodImageSource
                });
            });

            if (teller == 1) {
                gemLat = res[0].lat;
                gemLng = res[0].lng;
            }
            else {
                gemLat = ((maxLat - minLat) / 2) + minLat;
                gemLng = ((maxLng - minLng) / 2) + minLng;
            }



            $scope.map.setCenter(new google.maps.LatLng(gemLat, gemLng));
            $scope.map.setZoom(14);
            //klaar met markers plaatsen en kaart verplaatsen naar hun gemiddelde
        };
    };

    angular.module("geofeelings").controller("userController", ["$scope", "$location", "searchService","shareService","$routeParams", userController]);
})
();
/**
 * Created by Jonatan on 28/12/2015.
 */

var eventService = function ($http) {
    "use strict";

    //private

    //public
    return {
        getEventById : function (eventid, cb) {
            $http.get("/api/event/" + eventid).success(function (data) {
                if(data.redirect) {
                    cb(null, data);
                } else {
                    cb(null, new GfEvent(data._id, data.eventname, data.eventimage, data.authorid, data.from, data.until, data.lat, data.lng, data.address));
                }
                cb(null, data);
            }).error(function (error) {
                cb(error, null);
            });
        }
    };
};

angular.module("geofeelings").factory("eventService", ["$http", "googleMapsService", eventService]);
/**
 * Created by Jonatan on 22/12/2015.
 */

// https://developers.google.com/maps/documentation/geocoding/intro?csw=1#Geocoding
// Dit gebruiken om adressen te vertalen naar lat en lng of omgekeerd
// Waarom? => google maps werkt met lat en lng, wordt zo opgeslaan in de database

var googleMapsService = function () {
    "use strict";
    // private
    var geocoder = new google.maps.Geocoder();

    //public
    return {
        showLocationOnMap: function (lat, lng) {

        },

        convertAdressToCoordinates: function (address, cb) {
            geocoder.geocode({address: address}, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    cb(null, results[0].geometry.location);
                } else {
                    cb(status, null);
                }
            });
        },

        convertCoordinatesToAdress: function (lat, lng, cb) {
            var location = new google.maps.LatLng(lat, lng);
            geocoder.geocode({latLng: location}, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    cb(null, results[0].formatted_address);
                } else if (status == google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {
                    setTimeout(function(){
                        cb(null, results[0].formatted_address);
                    }, 200);
                } else {
                    cb(status, null);
                }
            });
        }
    };
};

angular.module("geofeelings").factory("googleMapsService", [googleMapsService]);
/**
 * Created by Jonatan on 27/12/2015.
 */

var profileService = function ($http, googleMapsService) {
    "use strict";

    // private

    //public
    return {
        getUser : function (cb) {
            $http.get("/auth/user").success(function (data) {
                if(data.redirect) {
                    cb(null, data);
                } else {
                    cb(null, new GfUser(data._id, data.username, data.email, data.userimage, new Date(data.age), data.lat, data.lng, data.address, data.chat, data.admin));
                }
            }).error(function (error) {
                cb(error, null);
            });
        },

        saveUser : function (user, cb) {
            googleMapsService.convertAdressToCoordinates(user.address, function(err, coord) {
                if(!err) {
                    user.lat = coord.lat();
                    user.lng = coord.lng();

                    $http.put("/api/user/" + user.id, user).success(function (data) {
                        if(data.redirect) {
                            cb(null, data);
                        } else {
                            cb(null, new GfUser(data._id, data.username, data.email, data.userimage, new Date(data.age), data.lat, data.lng, data.address, data.chat, data.admin));
                        }
                    }).error(function (error) {
                        cb(error, null);
                    });
                } else {
                    cb(err, null);
                }
            });
        },

        logout : function () {
            return $http.get("/auth/logout").then(function (data) {
                return data;
            });
        }
    };
};

angular.module("geofeelings").factory("profileService", ["$http", "googleMapsService", profileService]);
(function () {
    "use strict";

    var searchService = function ($http) {

        var search = function (searchString) {
            var url = 'http://localhost:3000/api/user/';

            return $http.get(url).then(function (response) {

                var arSearchResults = [];
                angular.forEach(response.data, function (searchR) {
                    var newSR = new SearchResult(searchR._id, searchR.username);
                    arSearchResults.push(newSR);
                });
                return arSearchResults;
            });
        };

        var searchUserFromId = function (searchString) {
            var url = 'http://localhost:3000/api/user/' + searchString;
            return $http.get(url).then(function (response) {
                return new GfUser(
                    response.data._id,
                    response.data.username,
                    response.data.email,
                    response.data.userimage,
                    response.data.age,
                    response.data.lat,
                    response.data.lng,
                    response.data.chat,
                    response.data.admin
                );

            });
            };

        return {
            search: search,
            searchUserFromId: searchUserFromId
        };
    };
    angular.module("geofeelings").factory("searchService", ["$http", searchService]);
})();
/**
 * Created by Lienert on 23/12/2015.
 */

/**
 * OPMERKING
 * post share zal niet werken
 * implementeer googleService
 * voorbeeld kan je vinden in profileservice (post functie)
 * Groetjes Jonatan
 */

var shareService = function ($http, googleMapsService) {
    "use strict";

    var makeAddress = function (address) {
        var split = address.split(",");
        return split[0] + ", " + split[1];
    };

    var postShare = function (data) {

        $http({
            url: 'http://localhost:3000/api/share',
            method: 'POST',
            data: data,
            headers: {'Content-Type': 'application/json'}
        }).
        success(function (serverData) {
            console.log("dees moetk nog naar een andere controller krijgen " + serverData);
        });
    };

    /* old */
    /*var getSharesByUserId = function (userid) {
        var url = 'http://localhost:3000/api/share/' + userid; //NIEUW PAD!!! (al aangepast)
        return $http.get(url).then(function (response) {
            var sharesfound = [];
            angular.forEach(response.data, function (share) {
                var newShare = new GfShare(share._id, share.userid, share.eventid, share.time, share.mood, share.lat, share.lng);
                sharesfound.push(newShare);
            });
            return sharesfound;
        });
    };*/

    return {
        postShare: postShare,
        getSharesByUserId: function (userid, cb) {
            $http.get("/api/share/" + userid).success(function (data) {
                if(data.redirect) {
                    cb(null, data);
                } else {
                    var shares = [];
                    angular.forEach(data, function(share) {
                        shares.push(new GfShare(share._id, share.userid, share.eventid, share.time, share.mood, share.lat, share.lng, makeAddress(share.address)));
                    });
                    cb(null, shares);
                }
            }).error(function (error) {
                cb(error, null);
            });
        }
    };
};
angular.module("geofeelings").factory("shareService", ["$http", "googleMapsService", shareService]);
/**
 * Created by Jonatan on 28/12/2015.
 */

function GfEvent(id, eventname, eventimage, authorid, from, until, lat, lng, address) {
    this.id = id;
    this.eventname = eventname;
    this.eventimage = eventimage;
    this.authorid = authorid;
    this.from = from;
    this.until = until;
    this.lat = lat;
    this.lng = lng;
    this.address = address;
}

GfShare.prototype.toString = function () {
    return this.eventname;
};
function GfShare(id, userid, eventid, time, mood, lat, lng, address) {
    this.id = id;
    this.userid = userid;
    this.eventid = eventid;
    this.time = time;
    this.mood = mood;
    this.lat = lat;
    this.lng = lng;
    this.address = address;
}

GfShare.prototype.toString = function () {
    return this.userid + " (" + this.time + ")";
};

function GfUser(id, username, email, userimage, age, lat, lng, address, chat, admin) {
    this.id = id;
    this.username = username;
    this.email = email;
    this.userimage = userimage;
    this.age = age;
    this.lat = lat;
    this.lng = lng;
    this.address = address;
    this.chat = chat;
    this.admin = admin;
}

GfUser.prototype.toString = function () {
    return this.username;
};

function SearchResult(id,username)
{
    this.id = id;
    this.username = username;
}
SearchResult.prototype.toString = function() {
    return this.title;
};

/**
 * Created by Jonatan on 22/11/2015.
 */

//# sourceMappingURL=data:application/json;base64,
