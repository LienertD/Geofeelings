(function () {
    "use strict";

    var app = angular.module("geofeelings", ["ngRoute"]);

    app.config(function ($routeProvider) {
        $routeProvider
            .when("/admin", {
                templateUrl: "./controllers/adminController/admin.html"
            }).when("/search", {
                templateUrl: "./controllers/searchController/search.html"
            }).when("/intro", {
                templateUrl: "./controllers/introController/intro.html"
            }).when("/help", {
                templateUrl: "./directives/help.html"
            }).when("/login", {
                templateUrl: "./controllers/loginController/login.html"
            }).when("/register", {
                templateUrl: "./controllers/loginController/register.html"
            }).when("/password", {
                templateUrl: "./controllers/loginController/password.html"
            }).when("/user", {
                templateUrl: "./controllers/userController/user.html"
            }).when("/user/:param", {
                templateUrl: "./controllers/userController/user.html",
                controller: 'userController'
            }).when("/me", {
                templateUrl: "./controllers/userController/me.html"
            }).when("/event", {
                templateUrl: "./controllers/eventController/event.html"
            }).when("/addEvent", {
                templateUrl: "./controllers/eventController/addEvent.html"
            }).when("/location", {
                templateUrl: "./controllers/locationController/location.html"
            }).when("/intro_shared", {
                templateUrl: "./controllers/introController/intro_shared.html"
            }).otherwise({
                redirectTo: "/intro"
            });
    });

    app.directive("searchresult", function () {
        return {
            restrict: 'E',
            templateUrl: 'directives/searchResult.html'
        };
    });

    app.service('sharedProperties', function () {
        var property = 'First';

        return {
            getProperty: function () {
                return property;
            },
            setProperty: function (value) {
                property = value;
            }
        };
    });

})();

/**
 * Created by Jonatan on 6/12/2015.
 */

(function () {
    "use strict";

    var adminController = function ($scope) {

    };

    angular.module("geofeelings").controller("adminController", ["$scope", adminController]);
})();
/**
 * Created by Jonatan on 4/12/2015.
 */


(function () {
    "use strict";

    var eventController = function ($scope) {

    };

    angular.module("geofeelings").controller("eventController", ["$scope", eventController]);
})();
/**
 * Created by Jonatan on 1/12/2015.
 */

(function () {
    "use strict";

    var introController = function ($scope, $http) {


        //SMILEY TEKENEN
        $scope.sliderValue = 50;
        $scope.moodWord = null;
        var c = document.getElementById("smileyCanvas");
        var ctx = c.getContext("2d");

        //telkens slidervalue verandert gezichtje tekenen
        $scope.$watch("sliderValue", function (newValue, oldValue) {
            ctx.clearRect(0, 0, c.width, c.height); //canvas clearen voor nieuw frame

            var mood = $scope.sliderValue;
            giveMoodWord();
            //offset positie mond
            var offsetX = c.width/5;
            var offSetY = c.width/2.14 + (mood / (c.width/6));

            //variabelen voor beziercurve (= mond)
            var SPx = offsetX;
            var SPy = offSetY + 100 - (mood / 10 * 8);
            var H1x = offsetX;
            var H1y = offSetY + (mood / 10 * 12);
            var H2x = offsetX + 180;
            var H2y = offSetY + (mood / 10 * 12);
            var EPx = offsetX + (c.width/1.666);
            var EPy = offSetY + 100 - (mood / 10 * 8);

            //rood en groen bereken voor achtergrond hoofd
            var bgR = Math.round(170 - (mood / 100) * 170);
            var bgG = Math.round(mood / 100 * 132);

            //hoofd
            ctx.lineWidth = c.width/60;
            ctx.beginPath();
            ctx.arc((c.width/2), (c.width/2), (c.width/2.07), 0, 2 * Math.PI);
            ctx.fillStyle = "rgb(" + bgR + "," + bgG + ",0)";
            ctx.fill();
            ctx.stroke();

            //mond

            ctx.lineWidth = c.width/30;
            ctx.beginPath();
            ctx.moveTo(SPx, SPy);
            ctx.bezierCurveTo(H1x, H1y, H2x, H2y, EPx, EPy);
            ctx.stroke();
            ctx.lineCap = "round";

            //oog links

            ctx.lineWidth = c.width/60;
            ctx.beginPath();
            ctx.arc(c.width/3, c.width/3, c.width/15, 0, 2 * Math.PI);
            ctx.fillStyle = 'black';
            ctx.fill();
            ctx.stroke();

            //oog rechts
            ctx.beginPath();
            ctx.arc(c.width/3*2, c.width/3, c.width/15, 0, 2 * Math.PI);
            ctx.fillStyle = 'black';
            ctx.fill();
            ctx.stroke();
        });

        var moodwords = ["horrible", "really bad", "bad", "okay", "good", "really good", "excellent"];

        var giveMoodWord = function () {
            if ($scope.sliderValue < 5) {
                $scope.moodWord = moodwords[0];
            }
            else if ($scope.sliderValue < 25) {
                $scope.moodWord = moodwords[1];
            }
            else if ($scope.sliderValue < 40) {
                $scope.moodWord = moodwords[2];
            }
            else if ($scope.sliderValue < 60) {
                $scope.moodWord = moodwords[3];
            }
            else if ($scope.sliderValue < 75) {
                $scope.moodWord = moodwords[4];
            }
            else if ($scope.sliderValue < 95) {
                $scope.moodWord = moodwords[5];
            }
            else {
                $scope.moodWord = moodwords[6];
            }
        };

        $scope.postShare = function () {
            navigator.geolocation.getCurrentPosition(function (position) {
                var data = { "userid": '5666d21305b4a8ba46e21983', "eventid": 0,"time":Date.now,"mood":$scope.sliderValue,"lat":position.coords.latitude,"lng": position.coords.longitude};

                $http({
                    url: 'http://localhost:3000/api/share',
                    method: 'POST',
                    data: data,
                    headers: { 'Content-Type': 'application/json' }
                }).
                    success(function (serverData) {
                        console.log("Share gelukt!!1!!l");
                    });
            });


        };
    };

    angular.module("geofeelings").controller("introController", ["$scope","$http", introController]);
})();
/**
 * Created by Jonatan on 6/12/2015.
 */

(function () {
    "use strict";

    var locationController = function ($scope) {

    };

    angular.module("geofeelings").controller("locationController", ["$scope", locationController]);
})();
/**
 * Created by Jonatan on 26/11/2015.
 */

(function () {
    "use strict";

    var loginController = function ($scope, $http, $location) {
        $scope.login = function () {
            $http.post('/login', {
                username : $scope.username,
                password : $scope.password
            }).success(function (data) {
                $scope.error = data.error;
                $location.path(data.redirect);
            });
        };

        $scope.register = function() {
            $http.post('/register', {
                username : $scope.username,
                password : $scope.password,
                email : $scope.email
            }).success(function (data) {
                $scope.error = data.error;
                $location.path(data.redirect);
            });
        };
    };

    angular.module("geofeelings").controller("loginController", ["$scope", "$http", "$location", loginController]);
})();
/**
 * Created by Jonatan on 21/11/2015.
 */

(function () {
    "use strict";

    var mainController = function ($scope) {
        if (navigator.geolocation) {
            $scope.image = "./assets/common.png";
            $scope.mapOptions = {
                zoom: 15,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                disableDefaultUI: true
            };

            $scope.map = new google.maps.Map(document.querySelector("#map"), $scope.mapOptions);

            navigator.geolocation.getCurrentPosition(function (position) {
                $scope.map.setCenter(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));
                $scope.marker = new google.maps.Marker({
                    position: $scope.map.getCenter(),
                    map: $scope.map,
                    icon: $scope.image
                });
            });
        } else {
            //throw exception
        }
    };

    angular.module("geofeelings").controller("mainController", ["$scope", mainController]);
})();
/**
 * Created by Jonatan on 25/11/2015.
 */


(function () {
    "use strict";

    var searchController = function ($scope, searchService, sharedProperties) {

        $scope.searchModel = null;

        $scope.searchOnSubmit = function (formObj) {
            if ($scope.searchModel.length > 0) {
                searchNow();
            }
        };
        $scope.searchOnKeyPress = function () {
            if ($scope.searchModel !== null) {
                searchNow();
            }
        };

        $scope.filterSearchResults = function (i) {
            if ($scope.searchModel === "") {
                return false;
            }

            if (i.username.toLowerCase().indexOf($scope.searchModel.toLocaleLowerCase()) >= 0) {
                return true;
            }
            if (i.description !== undefined) {
                if (i.description.toLowerCase().indexOf($scope.searchModel.toLocaleLowerCase()) >= 0) {
                    return true;
                }
            }

            return false;
        };


        var searchNow = function () {
            searchService.search($scope.searchModel).then(onResultsReady);
        };

        var onResultsReady = function (res) {
            $scope.searchResults = res;
        };

        var onResultsError = function (err) {
        };
    };

    angular.module("geofeelings").controller("searchController", ["$scope", "searchService","sharedProperties", searchController]);
})();
/**
 * Created by Jonatan on 21/12/2015.
 */

(function () {
    "use strict";

    var meController = function ( $scope, $http, $location) {
        $scope.user = {};
        $http.get('/user').success(function(data) {
            if(data.redirect) {
                $location.path(data.redirect);
            } else {
                console.log(data);
                $scope.user = data;
            }
        });

        $scope.logout = function() {
            $http.get('/logout').success(function (data) {
                $location.path(data.redirect);
            });
        };

        $scope.save = function() {

        };
    };

    angular.module("geofeelings").controller("meController", ["$scope", "$http", "$location", meController]);
})();
/**
 * Created by Jonatan on 1/12/2015.
 */

(function () {
    "use strict";

    var userController = function ($scope, $location, searchService) {

        $scope.init = function () {
            var userid = $location.search().userid;
            searchService.searchUserFromId(userid).then(userFoundWithId);
            searchService.getSharesByUserId(userid).then(sharesFoundWithId); //IMPLEMENTEREN ALS JONATAN DE API FTIE HEEFT AANGEMAAKT
        };

        var userFoundWithId = function (res) {
            $scope.userfoundwithid = res;

            if (res.lat !== undefined && res.lat !== undefined) {
                $scope.map.setCenter(new google.maps.LatLng(res.lat, res.lng));
                if ($scope.marker !== undefined) {
                    $scope.marker.setMap(null); //verwijdert alle markers eerst
                }
                $scope.marker = new google.maps.Marker({
                    position: {lat: res.lat, lng: res.lng},
                    map: $scope.map,
                    icon: $scope.image
                });
            }
        };

        var giveFeelingsImageArrayNumber = function (res) {
            if (res.mood === 100) {
                console.log(res);
                console.log("dendeen heeft 100");
                return 4;
            }
            else {
                return Math.round(res.mood / 20);
            }
        };

        var sharesFoundWithId = function (res) {

            $scope.shareFoundWithUserId = res;

            //markers plaatsen en kaart verplaatsen naar hun gemiddelde
            var minLat = 100,
                maxLat = 0,
                minLng = 100,
                maxLng = 0,
                teller = 0,
                gemLat = 0,
                gemLng = 0;

            $scope.marker.setMap(null); //verwijdert alle markers eerst

            var feelingImages = ["depressed", "sad", "common", "happy", "excited"];

            res.forEach(function (res) {

                teller++;
                if (res.lat < minLat) {
                    minLat = res.lat;
                }
                if (res.lat > maxLat) {
                    maxLat = res.lat;
                }

                if (res.lng < minLng) {
                    minLng = res.lng;
                }
                if (res.lng > maxLng) {
                    maxLng = res.lng;
                }

                console.log(giveFeelingsImageArrayNumber(res));

                $scope.marker = new google.maps.Marker({
                    position: {lat: res.lat, lng: res.lng},
                    map: $scope.map,
                    icon: "./assets/" + feelingImages[giveFeelingsImageArrayNumber(res)] + ".png"
                });
            });

            if (teller == 1) {
                gemLat = res[0].lat;
                gemLng = res[0].lng;
            }
            else {
                gemLat = ((maxLat - minLat) / 2) + minLat;
                gemLng = ((maxLng - minLng) / 2) + minLng;
            }

            console.log("lat "+(maxLat-minLat));
            console.log("lng "+(maxLng-minLng));

            $scope.map.setCenter(new google.maps.LatLng(gemLat, gemLng));
            $scope.map.setZoom(12);
            //klaar met markers plaatsen en kaart verplaatsen naar hun gemiddelde
        };
    };

    angular.module("geofeelings").controller("userController", ["$scope", "$location", "searchService", userController]);
})
();
(function () {
    "use strict";

    var searchService = function ($http) {

        var search = function (searchString) {
            var url = 'http://localhost:3000/api/users';
            return $http.get(url).then(function (response) {

                var arSearchResults = [];
                angular.forEach(response.data, function (searchR) {
                    var newSR = new SearchResult(searchR._id, searchR.username);
                    arSearchResults.push(newSR);
                });
                return arSearchResults;
            });
        };

        var searchUserFromId = function (searchString) {
            var url = 'http://localhost:3000/api/user/' + searchString;
            return $http.get(url).then(function (response) {
                return new GfUser(
                    response.data._id,
                    response.data.username,
                    response.data.email,
                    response.data.userimage,
                    response.data.age,
                    response.data.lat,
                    response.data.lng,
                    response.data.chat,
                    response.data.admin
                );

            });
        };

        var getSharesByUserId = function (userid) {
            var url = 'http://localhost:3000/api/share/user/' + userid;
            return $http.get(url).then(function (response) {

                var sharesfound = [];
                angular.forEach(response.data, function (share) {
                    var newShare = new GFShare(share._id, share.userid, share.eventid, 0, share.mood, share.lat, share.lng);
                    sharesfound.push(newShare);
                });
                return sharesfound;
            });
        };

        return {
            search: search,
            searchUserFromId: searchUserFromId,
            getSharesByUserId: getSharesByUserId
        };
    };
    angular.module("geofeelings").factory("searchService", ["$http", searchService]);
})();
function GFShare(id, userid, eventid, time, mood, lat, lng) {
    this.id = id;
    this.userid = userid;
    this.eventid = eventid;
    this.time = time;
    this.mood = mood;
    this.lat = lat;
    this.lng = lng;
}
GFShare.prototype.toString = function () {
    return this.user + " (" + this.time + ")";
};

function GfUser(id, username, email, userimage, age, lat, lng, chat, admin) {
    this.id = id;
    this.username = username;
    this.email = email;
    this.userimage = userimage;
    this.age = age;
    this.lat = lat;
    this.lng = lng;
    this.chat = chat;
    this.admin = admin;
}
GfUser.prototype.toString = function () {
    return this.username;
};

function SearchResult(id,username)
{
    this.id = id;
    this.username = username;
}
SearchResult.prototype.toString = function() {
    return this.title;
};

/**
 * Created by Jonatan on 22/11/2015.
 */

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFkbWluQ29udHJvbGxlci9hZG1pbkNvbnRyb2xsZXIuanMiLCJldmVudENvbnRyb2xsZXIvZXZlbnRDb250cm9sbGVyLmpzIiwiaW50cm9Db250cm9sbGVyL2ludHJvQ29udHJvbGxlci5qcyIsImxvY2F0aW9uQ29udHJvbGxlci9sb2NhdGlvbkNvbnRyb2xsZXIuanMiLCJsb2dpbkNvbnRyb2xsZXIvbG9naW5Db250cm9sbGVyLmpzIiwibWFpbkNvbnRyb2xsZXIvbWFpbkNvbnRyb2xsZXIuanMiLCJzZWFyY2hDb250cm9sbGVyL3NlYXJjaENvbnRyb2xsZXIuanMiLCJ1c2VyQ29udHJvbGxlci9tZUNvbnRyb2xsZXIuanMiLCJ1c2VyQ29udHJvbGxlci91c2VyQ29udHJvbGxlci5qcyIsInNlYXJjaFNlcnZpY2UuanMiLCJnZlNoYXJlLmpzIiwiZ2ZVc2VyLmpzIiwiU2VhcmNoUmVzdWx0LmpzIiwibWFwRXhjZXB0aW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDekdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ1JBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKFwiZ2VvZmVlbGluZ3NcIiwgW1wibmdSb3V0ZVwiXSk7XHJcblxyXG4gICAgYXBwLmNvbmZpZyhmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIpIHtcclxuICAgICAgICAkcm91dGVQcm92aWRlclxyXG4gICAgICAgICAgICAud2hlbihcIi9hZG1pblwiLCB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCIuL2NvbnRyb2xsZXJzL2FkbWluQ29udHJvbGxlci9hZG1pbi5odG1sXCJcclxuICAgICAgICAgICAgfSkud2hlbihcIi9zZWFyY2hcIiwge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiLi9jb250cm9sbGVycy9zZWFyY2hDb250cm9sbGVyL3NlYXJjaC5odG1sXCJcclxuICAgICAgICAgICAgfSkud2hlbihcIi9pbnRyb1wiLCB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCIuL2NvbnRyb2xsZXJzL2ludHJvQ29udHJvbGxlci9pbnRyby5odG1sXCJcclxuICAgICAgICAgICAgfSkud2hlbihcIi9oZWxwXCIsIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi4vZGlyZWN0aXZlcy9oZWxwLmh0bWxcIlxyXG4gICAgICAgICAgICB9KS53aGVuKFwiL2xvZ2luXCIsIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi4vY29udHJvbGxlcnMvbG9naW5Db250cm9sbGVyL2xvZ2luLmh0bWxcIlxyXG4gICAgICAgICAgICB9KS53aGVuKFwiL3JlZ2lzdGVyXCIsIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi4vY29udHJvbGxlcnMvbG9naW5Db250cm9sbGVyL3JlZ2lzdGVyLmh0bWxcIlxyXG4gICAgICAgICAgICB9KS53aGVuKFwiL3Bhc3N3b3JkXCIsIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi4vY29udHJvbGxlcnMvbG9naW5Db250cm9sbGVyL3Bhc3N3b3JkLmh0bWxcIlxyXG4gICAgICAgICAgICB9KS53aGVuKFwiL3VzZXJcIiwge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiLi9jb250cm9sbGVycy91c2VyQ29udHJvbGxlci91c2VyLmh0bWxcIlxyXG4gICAgICAgICAgICB9KS53aGVuKFwiL3VzZXIvOnBhcmFtXCIsIHtcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcIi4vY29udHJvbGxlcnMvdXNlckNvbnRyb2xsZXIvdXNlci5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAndXNlckNvbnRyb2xsZXInXHJcbiAgICAgICAgICAgIH0pLndoZW4oXCIvbWVcIiwge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiLi9jb250cm9sbGVycy91c2VyQ29udHJvbGxlci9tZS5odG1sXCJcclxuICAgICAgICAgICAgfSkud2hlbihcIi9ldmVudFwiLCB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCIuL2NvbnRyb2xsZXJzL2V2ZW50Q29udHJvbGxlci9ldmVudC5odG1sXCJcclxuICAgICAgICAgICAgfSkud2hlbihcIi9hZGRFdmVudFwiLCB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCIuL2NvbnRyb2xsZXJzL2V2ZW50Q29udHJvbGxlci9hZGRFdmVudC5odG1sXCJcclxuICAgICAgICAgICAgfSkud2hlbihcIi9sb2NhdGlvblwiLCB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCIuL2NvbnRyb2xsZXJzL2xvY2F0aW9uQ29udHJvbGxlci9sb2NhdGlvbi5odG1sXCJcclxuICAgICAgICAgICAgfSkud2hlbihcIi9pbnRyb19zaGFyZWRcIiwge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiLi9jb250cm9sbGVycy9pbnRyb0NvbnRyb2xsZXIvaW50cm9fc2hhcmVkLmh0bWxcIlxyXG4gICAgICAgICAgICB9KS5vdGhlcndpc2Uoe1xyXG4gICAgICAgICAgICAgICAgcmVkaXJlY3RUbzogXCIvaW50cm9cIlxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGFwcC5kaXJlY3RpdmUoXCJzZWFyY2hyZXN1bHRcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnZGlyZWN0aXZlcy9zZWFyY2hSZXN1bHQuaHRtbCdcclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcblxyXG4gICAgYXBwLnNlcnZpY2UoJ3NoYXJlZFByb3BlcnRpZXMnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHByb3BlcnR5ID0gJ0ZpcnN0JztcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0UHJvcGVydHk6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0UHJvcGVydHk6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydHkgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpvbmF0YW4gb24gNi8xMi8yMDE1LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgYWRtaW5Db250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSkge1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoXCJnZW9mZWVsaW5nc1wiKS5jb250cm9sbGVyKFwiYWRtaW5Db250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBhZG1pbkNvbnRyb2xsZXJdKTtcclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBKb25hdGFuIG9uIDQvMTIvMjAxNS5cclxuICovXHJcblxyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBldmVudENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoJHNjb3BlKSB7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZShcImdlb2ZlZWxpbmdzXCIpLmNvbnRyb2xsZXIoXCJldmVudENvbnRyb2xsZXJcIiwgW1wiJHNjb3BlXCIsIGV2ZW50Q29udHJvbGxlcl0pO1xyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpvbmF0YW4gb24gMS8xMi8yMDE1LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgaW50cm9Db250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSwgJGh0dHApIHtcclxuXHJcblxyXG4gICAgICAgIC8vU01JTEVZIFRFS0VORU5cclxuICAgICAgICAkc2NvcGUuc2xpZGVyVmFsdWUgPSA1MDtcclxuICAgICAgICAkc2NvcGUubW9vZFdvcmQgPSBudWxsO1xyXG4gICAgICAgIHZhciBjID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzbWlsZXlDYW52YXNcIik7XHJcbiAgICAgICAgdmFyIGN0eCA9IGMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG5cclxuICAgICAgICAvL3RlbGtlbnMgc2xpZGVydmFsdWUgdmVyYW5kZXJ0IGdlemljaHRqZSB0ZWtlbmVuXHJcbiAgICAgICAgJHNjb3BlLiR3YXRjaChcInNsaWRlclZhbHVlXCIsIGZ1bmN0aW9uIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcclxuICAgICAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjLndpZHRoLCBjLmhlaWdodCk7IC8vY2FudmFzIGNsZWFyZW4gdm9vciBuaWV1dyBmcmFtZVxyXG5cclxuICAgICAgICAgICAgdmFyIG1vb2QgPSAkc2NvcGUuc2xpZGVyVmFsdWU7XHJcbiAgICAgICAgICAgIGdpdmVNb29kV29yZCgpO1xyXG4gICAgICAgICAgICAvL29mZnNldCBwb3NpdGllIG1vbmRcclxuICAgICAgICAgICAgdmFyIG9mZnNldFggPSBjLndpZHRoLzU7XHJcbiAgICAgICAgICAgIHZhciBvZmZTZXRZID0gYy53aWR0aC8yLjE0ICsgKG1vb2QgLyAoYy53aWR0aC82KSk7XHJcblxyXG4gICAgICAgICAgICAvL3ZhcmlhYmVsZW4gdm9vciBiZXppZXJjdXJ2ZSAoPSBtb25kKVxyXG4gICAgICAgICAgICB2YXIgU1B4ID0gb2Zmc2V0WDtcclxuICAgICAgICAgICAgdmFyIFNQeSA9IG9mZlNldFkgKyAxMDAgLSAobW9vZCAvIDEwICogOCk7XHJcbiAgICAgICAgICAgIHZhciBIMXggPSBvZmZzZXRYO1xyXG4gICAgICAgICAgICB2YXIgSDF5ID0gb2ZmU2V0WSArIChtb29kIC8gMTAgKiAxMik7XHJcbiAgICAgICAgICAgIHZhciBIMnggPSBvZmZzZXRYICsgMTgwO1xyXG4gICAgICAgICAgICB2YXIgSDJ5ID0gb2ZmU2V0WSArIChtb29kIC8gMTAgKiAxMik7XHJcbiAgICAgICAgICAgIHZhciBFUHggPSBvZmZzZXRYICsgKGMud2lkdGgvMS42NjYpO1xyXG4gICAgICAgICAgICB2YXIgRVB5ID0gb2ZmU2V0WSArIDEwMCAtIChtb29kIC8gMTAgKiA4KTtcclxuXHJcbiAgICAgICAgICAgIC8vcm9vZCBlbiBncm9lbiBiZXJla2VuIHZvb3IgYWNodGVyZ3JvbmQgaG9vZmRcclxuICAgICAgICAgICAgdmFyIGJnUiA9IE1hdGgucm91bmQoMTcwIC0gKG1vb2QgLyAxMDApICogMTcwKTtcclxuICAgICAgICAgICAgdmFyIGJnRyA9IE1hdGgucm91bmQobW9vZCAvIDEwMCAqIDEzMik7XHJcblxyXG4gICAgICAgICAgICAvL2hvb2ZkXHJcbiAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBjLndpZHRoLzYwO1xyXG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGN0eC5hcmMoKGMud2lkdGgvMiksIChjLndpZHRoLzIpLCAoYy53aWR0aC8yLjA3KSwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJyZ2IoXCIgKyBiZ1IgKyBcIixcIiArIGJnRyArIFwiLDApXCI7XHJcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICAgICAgICAgIC8vbW9uZFxyXG5cclxuICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGMud2lkdGgvMzA7XHJcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgY3R4Lm1vdmVUbyhTUHgsIFNQeSk7XHJcbiAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKEgxeCwgSDF5LCBIMngsIEgyeSwgRVB4LCBFUHkpO1xyXG4gICAgICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIGN0eC5saW5lQ2FwID0gXCJyb3VuZFwiO1xyXG5cclxuICAgICAgICAgICAgLy9vb2cgbGlua3NcclxuXHJcbiAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBjLndpZHRoLzYwO1xyXG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGN0eC5hcmMoYy53aWR0aC8zLCBjLndpZHRoLzMsIGMud2lkdGgvMTUsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdibGFjayc7XHJcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICAgICAgICAgIC8vb29nIHJlY2h0c1xyXG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGN0eC5hcmMoYy53aWR0aC8zKjIsIGMud2lkdGgvMywgYy53aWR0aC8xNSwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcclxuICAgICAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgbW9vZHdvcmRzID0gW1wiaG9ycmlibGVcIiwgXCJyZWFsbHkgYmFkXCIsIFwiYmFkXCIsIFwib2theVwiLCBcImdvb2RcIiwgXCJyZWFsbHkgZ29vZFwiLCBcImV4Y2VsbGVudFwiXTtcclxuXHJcbiAgICAgICAgdmFyIGdpdmVNb29kV29yZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5zbGlkZXJWYWx1ZSA8IDUpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5tb29kV29yZCA9IG1vb2R3b3Jkc1swXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgkc2NvcGUuc2xpZGVyVmFsdWUgPCAyNSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1vb2RXb3JkID0gbW9vZHdvcmRzWzFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCRzY29wZS5zbGlkZXJWYWx1ZSA8IDQwKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubW9vZFdvcmQgPSBtb29kd29yZHNbMl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoJHNjb3BlLnNsaWRlclZhbHVlIDwgNjApIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5tb29kV29yZCA9IG1vb2R3b3Jkc1szXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgkc2NvcGUuc2xpZGVyVmFsdWUgPCA3NSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1vb2RXb3JkID0gbW9vZHdvcmRzWzRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCRzY29wZS5zbGlkZXJWYWx1ZSA8IDk1KSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubW9vZFdvcmQgPSBtb29kd29yZHNbNV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubW9vZFdvcmQgPSBtb29kd29yZHNbNl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUucG9zdFNoYXJlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGZ1bmN0aW9uIChwb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7IFwidXNlcmlkXCI6ICc1NjY2ZDIxMzA1YjRhOGJhNDZlMjE5ODMnLCBcImV2ZW50aWRcIjogMCxcInRpbWVcIjpEYXRlLm5vdyxcIm1vb2RcIjokc2NvcGUuc2xpZGVyVmFsdWUsXCJsYXRcIjpwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsXCJsbmdcIjogcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZX07XHJcblxyXG4gICAgICAgICAgICAgICAgJGh0dHAoe1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvc2hhcmUnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH1cclxuICAgICAgICAgICAgICAgIH0pLlxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24gKHNlcnZlckRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTaGFyZSBnZWx1a3QhITEhIWxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoXCJnZW9mZWVsaW5nc1wiKS5jb250cm9sbGVyKFwiaW50cm9Db250cm9sbGVyXCIsIFtcIiRzY29wZVwiLFwiJGh0dHBcIiwgaW50cm9Db250cm9sbGVyXSk7XHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSm9uYXRhbiBvbiA2LzEyLzIwMTUuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBsb2NhdGlvbkNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoJHNjb3BlKSB7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZShcImdlb2ZlZWxpbmdzXCIpLmNvbnRyb2xsZXIoXCJsb2NhdGlvbkNvbnRyb2xsZXJcIiwgW1wiJHNjb3BlXCIsIGxvY2F0aW9uQ29udHJvbGxlcl0pO1xyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpvbmF0YW4gb24gMjYvMTEvMjAxNS5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIGxvZ2luQ29udHJvbGxlciA9IGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCAkbG9jYXRpb24pIHtcclxuICAgICAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRodHRwLnBvc3QoJy9sb2dpbicsIHtcclxuICAgICAgICAgICAgICAgIHVzZXJuYW1lIDogJHNjb3BlLnVzZXJuYW1lLFxyXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQgOiAkc2NvcGUucGFzc3dvcmRcclxuICAgICAgICAgICAgfSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gZGF0YS5lcnJvcjtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKGRhdGEucmVkaXJlY3QpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkc2NvcGUucmVnaXN0ZXIgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJGh0dHAucG9zdCgnL3JlZ2lzdGVyJywge1xyXG4gICAgICAgICAgICAgICAgdXNlcm5hbWUgOiAkc2NvcGUudXNlcm5hbWUsXHJcbiAgICAgICAgICAgICAgICBwYXNzd29yZCA6ICRzY29wZS5wYXNzd29yZCxcclxuICAgICAgICAgICAgICAgIGVtYWlsIDogJHNjb3BlLmVtYWlsXHJcbiAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IGRhdGEuZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChkYXRhLnJlZGlyZWN0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoXCJnZW9mZWVsaW5nc1wiKS5jb250cm9sbGVyKFwibG9naW5Db250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBcIiRodHRwXCIsIFwiJGxvY2F0aW9uXCIsIGxvZ2luQ29udHJvbGxlcl0pO1xyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpvbmF0YW4gb24gMjEvMTEvMjAxNS5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIG1haW5Db250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSkge1xyXG4gICAgICAgIGlmIChuYXZpZ2F0b3IuZ2VvbG9jYXRpb24pIHtcclxuICAgICAgICAgICAgJHNjb3BlLmltYWdlID0gXCIuL2Fzc2V0cy9jb21tb24ucG5nXCI7XHJcbiAgICAgICAgICAgICRzY29wZS5tYXBPcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgem9vbTogMTUsXHJcbiAgICAgICAgICAgICAgICBtYXBUeXBlSWQ6IGdvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLFxyXG4gICAgICAgICAgICAgICAgZGlzYWJsZURlZmF1bHRVSTogdHJ1ZVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLm1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtYXBcIiksICRzY29wZS5tYXBPcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oZnVuY3Rpb24gKHBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubWFwLnNldENlbnRlcihuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSwgcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSkpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAkc2NvcGUubWFwLmdldENlbnRlcigpLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcDogJHNjb3BlLm1hcCxcclxuICAgICAgICAgICAgICAgICAgICBpY29uOiAkc2NvcGUuaW1hZ2VcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvL3Rocm93IGV4Y2VwdGlvblxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoXCJnZW9mZWVsaW5nc1wiKS5jb250cm9sbGVyKFwibWFpbkNvbnRyb2xsZXJcIiwgW1wiJHNjb3BlXCIsIG1haW5Db250cm9sbGVyXSk7XHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSm9uYXRhbiBvbiAyNS8xMS8yMDE1LlxyXG4gKi9cclxuXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIHNlYXJjaENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoJHNjb3BlLCBzZWFyY2hTZXJ2aWNlLCBzaGFyZWRQcm9wZXJ0aWVzKSB7XHJcblxyXG4gICAgICAgICRzY29wZS5zZWFyY2hNb2RlbCA9IG51bGw7XHJcblxyXG4gICAgICAgICRzY29wZS5zZWFyY2hPblN1Ym1pdCA9IGZ1bmN0aW9uIChmb3JtT2JqKSB7XHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuc2VhcmNoTW9kZWwubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgc2VhcmNoTm93KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgICRzY29wZS5zZWFyY2hPbktleVByZXNzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLnNlYXJjaE1vZGVsICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hOb3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5maWx0ZXJTZWFyY2hSZXN1bHRzID0gZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5zZWFyY2hNb2RlbCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaS51c2VybmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJHNjb3BlLnNlYXJjaE1vZGVsLnRvTG9jYWxlTG93ZXJDYXNlKCkpID49IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpLmRlc2NyaXB0aW9uICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpLmRlc2NyaXB0aW9uLnRvTG93ZXJDYXNlKCkuaW5kZXhPZigkc2NvcGUuc2VhcmNoTW9kZWwudG9Mb2NhbGVMb3dlckNhc2UoKSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHZhciBzZWFyY2hOb3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNlYXJjaFNlcnZpY2Uuc2VhcmNoKCRzY29wZS5zZWFyY2hNb2RlbCkudGhlbihvblJlc3VsdHNSZWFkeSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIG9uUmVzdWx0c1JlYWR5ID0gZnVuY3Rpb24gKHJlcykge1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VhcmNoUmVzdWx0cyA9IHJlcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgb25SZXN1bHRzRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgYW5ndWxhci5tb2R1bGUoXCJnZW9mZWVsaW5nc1wiKS5jb250cm9sbGVyKFwic2VhcmNoQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCJzZWFyY2hTZXJ2aWNlXCIsXCJzaGFyZWRQcm9wZXJ0aWVzXCIsIHNlYXJjaENvbnRyb2xsZXJdKTtcclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBKb25hdGFuIG9uIDIxLzEyLzIwMTUuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBtZUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoICRzY29wZSwgJGh0dHAsICRsb2NhdGlvbikge1xyXG4gICAgICAgICRzY29wZS51c2VyID0ge307XHJcbiAgICAgICAgJGh0dHAuZ2V0KCcvdXNlcicpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICBpZihkYXRhLnJlZGlyZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aChkYXRhLnJlZGlyZWN0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnVzZXIgPSBkYXRhO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJGh0dHAuZ2V0KCcvbG9nb3V0Jykuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoZGF0YS5yZWRpcmVjdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICRzY29wZS5zYXZlID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKFwiZ2VvZmVlbGluZ3NcIikuY29udHJvbGxlcihcIm1lQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCIkaHR0cFwiLCBcIiRsb2NhdGlvblwiLCBtZUNvbnRyb2xsZXJdKTtcclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBKb25hdGFuIG9uIDEvMTIvMjAxNS5cclxuICovXHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIHVzZXJDb250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCBzZWFyY2hTZXJ2aWNlKSB7XHJcblxyXG4gICAgICAgICRzY29wZS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdXNlcmlkID0gJGxvY2F0aW9uLnNlYXJjaCgpLnVzZXJpZDtcclxuICAgICAgICAgICAgc2VhcmNoU2VydmljZS5zZWFyY2hVc2VyRnJvbUlkKHVzZXJpZCkudGhlbih1c2VyRm91bmRXaXRoSWQpO1xyXG4gICAgICAgICAgICBzZWFyY2hTZXJ2aWNlLmdldFNoYXJlc0J5VXNlcklkKHVzZXJpZCkudGhlbihzaGFyZXNGb3VuZFdpdGhJZCk7IC8vSU1QTEVNRU5URVJFTiBBTFMgSk9OQVRBTiBERSBBUEkgRlRJRSBIRUVGVCBBQU5HRU1BQUtUXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHVzZXJGb3VuZFdpdGhJZCA9IGZ1bmN0aW9uIChyZXMpIHtcclxuICAgICAgICAgICAgJHNjb3BlLnVzZXJmb3VuZHdpdGhpZCA9IHJlcztcclxuXHJcbiAgICAgICAgICAgIGlmIChyZXMubGF0ICE9PSB1bmRlZmluZWQgJiYgcmVzLmxhdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubWFwLnNldENlbnRlcihuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKHJlcy5sYXQsIHJlcy5sbmcpKTtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubWFya2VyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFya2VyLnNldE1hcChudWxsKTsgLy92ZXJ3aWpkZXJ0IGFsbGUgbWFya2VycyBlZXJzdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7bGF0OiByZXMubGF0LCBsbmc6IHJlcy5sbmd9LFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcDogJHNjb3BlLm1hcCxcclxuICAgICAgICAgICAgICAgICAgICBpY29uOiAkc2NvcGUuaW1hZ2VcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdpdmVGZWVsaW5nc0ltYWdlQXJyYXlOdW1iZXIgPSBmdW5jdGlvbiAocmVzKSB7XHJcbiAgICAgICAgICAgIGlmIChyZXMubW9vZCA9PT0gMTAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJkZW5kZWVuIGhlZWZ0IDEwMFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiA0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQocmVzLm1vb2QgLyAyMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgc2hhcmVzRm91bmRXaXRoSWQgPSBmdW5jdGlvbiAocmVzKSB7XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuc2hhcmVGb3VuZFdpdGhVc2VySWQgPSByZXM7XHJcblxyXG4gICAgICAgICAgICAvL21hcmtlcnMgcGxhYXRzZW4gZW4ga2FhcnQgdmVycGxhYXRzZW4gbmFhciBodW4gZ2VtaWRkZWxkZVxyXG4gICAgICAgICAgICB2YXIgbWluTGF0ID0gMTAwLFxyXG4gICAgICAgICAgICAgICAgbWF4TGF0ID0gMCxcclxuICAgICAgICAgICAgICAgIG1pbkxuZyA9IDEwMCxcclxuICAgICAgICAgICAgICAgIG1heExuZyA9IDAsXHJcbiAgICAgICAgICAgICAgICB0ZWxsZXIgPSAwLFxyXG4gICAgICAgICAgICAgICAgZ2VtTGF0ID0gMCxcclxuICAgICAgICAgICAgICAgIGdlbUxuZyA9IDA7XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUubWFya2VyLnNldE1hcChudWxsKTsgLy92ZXJ3aWpkZXJ0IGFsbGUgbWFya2VycyBlZXJzdFxyXG5cclxuICAgICAgICAgICAgdmFyIGZlZWxpbmdJbWFnZXMgPSBbXCJkZXByZXNzZWRcIiwgXCJzYWRcIiwgXCJjb21tb25cIiwgXCJoYXBweVwiLCBcImV4Y2l0ZWRcIl07XHJcblxyXG4gICAgICAgICAgICByZXMuZm9yRWFjaChmdW5jdGlvbiAocmVzKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGVsbGVyKys7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzLmxhdCA8IG1pbkxhdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbkxhdCA9IHJlcy5sYXQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzLmxhdCA+IG1heExhdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1heExhdCA9IHJlcy5sYXQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJlcy5sbmcgPCBtaW5MbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICBtaW5MbmcgPSByZXMubG5nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHJlcy5sbmcgPiBtYXhMbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXhMbmcgPSByZXMubG5nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGdpdmVGZWVsaW5nc0ltYWdlQXJyYXlOdW1iZXIocmVzKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7bGF0OiByZXMubGF0LCBsbmc6IHJlcy5sbmd9LFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcDogJHNjb3BlLm1hcCxcclxuICAgICAgICAgICAgICAgICAgICBpY29uOiBcIi4vYXNzZXRzL1wiICsgZmVlbGluZ0ltYWdlc1tnaXZlRmVlbGluZ3NJbWFnZUFycmF5TnVtYmVyKHJlcyldICsgXCIucG5nXCJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0ZWxsZXIgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgZ2VtTGF0ID0gcmVzWzBdLmxhdDtcclxuICAgICAgICAgICAgICAgIGdlbUxuZyA9IHJlc1swXS5sbmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBnZW1MYXQgPSAoKG1heExhdCAtIG1pbkxhdCkgLyAyKSArIG1pbkxhdDtcclxuICAgICAgICAgICAgICAgIGdlbUxuZyA9ICgobWF4TG5nIC0gbWluTG5nKSAvIDIpICsgbWluTG5nO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImxhdCBcIisobWF4TGF0LW1pbkxhdCkpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImxuZyBcIisobWF4TG5nLW1pbkxuZykpO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLm1hcC5zZXRDZW50ZXIobmV3IGdvb2dsZS5tYXBzLkxhdExuZyhnZW1MYXQsIGdlbUxuZykpO1xyXG4gICAgICAgICAgICAkc2NvcGUubWFwLnNldFpvb20oMTIpO1xyXG4gICAgICAgICAgICAvL2tsYWFyIG1ldCBtYXJrZXJzIHBsYWF0c2VuIGVuIGthYXJ0IHZlcnBsYWF0c2VuIG5hYXIgaHVuIGdlbWlkZGVsZGVcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZShcImdlb2ZlZWxpbmdzXCIpLmNvbnRyb2xsZXIoXCJ1c2VyQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCIkbG9jYXRpb25cIiwgXCJzZWFyY2hTZXJ2aWNlXCIsIHVzZXJDb250cm9sbGVyXSk7XHJcbn0pXHJcbigpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgc2VhcmNoU2VydmljZSA9IGZ1bmN0aW9uICgkaHR0cCkge1xyXG5cclxuICAgICAgICB2YXIgc2VhcmNoID0gZnVuY3Rpb24gKHNlYXJjaFN0cmluZykge1xyXG4gICAgICAgICAgICB2YXIgdXJsID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvdXNlcnMnO1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgYXJTZWFyY2hSZXN1bHRzID0gW107XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocmVzcG9uc2UuZGF0YSwgZnVuY3Rpb24gKHNlYXJjaFIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3U1IgPSBuZXcgU2VhcmNoUmVzdWx0KHNlYXJjaFIuX2lkLCBzZWFyY2hSLnVzZXJuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBhclNlYXJjaFJlc3VsdHMucHVzaChuZXdTUik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhclNlYXJjaFJlc3VsdHM7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBzZWFyY2hVc2VyRnJvbUlkID0gZnVuY3Rpb24gKHNlYXJjaFN0cmluZykge1xyXG4gICAgICAgICAgICB2YXIgdXJsID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9hcGkvdXNlci8nICsgc2VhcmNoU3RyaW5nO1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgR2ZVc2VyKFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEuX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEudXNlcm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5lbWFpbCxcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLnVzZXJpbWFnZSxcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLmFnZSxcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLmxhdCxcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLmxuZyxcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLmNoYXQsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5hZG1pblxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBnZXRTaGFyZXNCeVVzZXJJZCA9IGZ1bmN0aW9uICh1c2VyaWQpIHtcclxuICAgICAgICAgICAgdmFyIHVybCA9ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL3NoYXJlL3VzZXIvJyArIHVzZXJpZDtcclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHNoYXJlc2ZvdW5kID0gW107XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocmVzcG9uc2UuZGF0YSwgZnVuY3Rpb24gKHNoYXJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1NoYXJlID0gbmV3IEdGU2hhcmUoc2hhcmUuX2lkLCBzaGFyZS51c2VyaWQsIHNoYXJlLmV2ZW50aWQsIDAsIHNoYXJlLm1vb2QsIHNoYXJlLmxhdCwgc2hhcmUubG5nKTtcclxuICAgICAgICAgICAgICAgICAgICBzaGFyZXNmb3VuZC5wdXNoKG5ld1NoYXJlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNoYXJlc2ZvdW5kO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzZWFyY2g6IHNlYXJjaCxcclxuICAgICAgICAgICAgc2VhcmNoVXNlckZyb21JZDogc2VhcmNoVXNlckZyb21JZCxcclxuICAgICAgICAgICAgZ2V0U2hhcmVzQnlVc2VySWQ6IGdldFNoYXJlc0J5VXNlcklkXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBhbmd1bGFyLm1vZHVsZShcImdlb2ZlZWxpbmdzXCIpLmZhY3RvcnkoXCJzZWFyY2hTZXJ2aWNlXCIsIFtcIiRodHRwXCIsIHNlYXJjaFNlcnZpY2VdKTtcclxufSkoKTsiLCJmdW5jdGlvbiBHRlNoYXJlKGlkLCB1c2VyaWQsIGV2ZW50aWQsIHRpbWUsIG1vb2QsIGxhdCwgbG5nKSB7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB0aGlzLnVzZXJpZCA9IHVzZXJpZDtcclxuICAgIHRoaXMuZXZlbnRpZCA9IGV2ZW50aWQ7XHJcbiAgICB0aGlzLnRpbWUgPSB0aW1lO1xyXG4gICAgdGhpcy5tb29kID0gbW9vZDtcclxuICAgIHRoaXMubGF0ID0gbGF0O1xyXG4gICAgdGhpcy5sbmcgPSBsbmc7XHJcbn1cclxuR0ZTaGFyZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy51c2VyICsgXCIgKFwiICsgdGhpcy50aW1lICsgXCIpXCI7XHJcbn07XHJcbiIsImZ1bmN0aW9uIEdmVXNlcihpZCwgdXNlcm5hbWUsIGVtYWlsLCB1c2VyaW1hZ2UsIGFnZSwgbGF0LCBsbmcsIGNoYXQsIGFkbWluKSB7XHJcbiAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB0aGlzLnVzZXJuYW1lID0gdXNlcm5hbWU7XHJcbiAgICB0aGlzLmVtYWlsID0gZW1haWw7XHJcbiAgICB0aGlzLnVzZXJpbWFnZSA9IHVzZXJpbWFnZTtcclxuICAgIHRoaXMuYWdlID0gYWdlO1xyXG4gICAgdGhpcy5sYXQgPSBsYXQ7XHJcbiAgICB0aGlzLmxuZyA9IGxuZztcclxuICAgIHRoaXMuY2hhdCA9IGNoYXQ7XHJcbiAgICB0aGlzLmFkbWluID0gYWRtaW47XHJcbn1cclxuR2ZVc2VyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLnVzZXJuYW1lO1xyXG59O1xyXG4iLCJmdW5jdGlvbiBTZWFyY2hSZXN1bHQoaWQsdXNlcm5hbWUpXHJcbntcclxuICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIHRoaXMudXNlcm5hbWUgPSB1c2VybmFtZTtcclxufVxyXG5TZWFyY2hSZXN1bHQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy50aXRsZTtcclxufTtcclxuIiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSm9uYXRhbiBvbiAyMi8xMS8yMDE1LlxyXG4gKi9cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
