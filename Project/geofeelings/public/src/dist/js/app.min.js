(function () {
    "use strict";

    var app = angular.module("geofeelings", ["ngRoute"]);

    app.config(function ($routeProvider) {
        $routeProvider
            .when("/admin", {
                templateUrl: "./controllers/adminController/admin.html"
            }).when("/search", {
                templateUrl: "./controllers/searchController/search.html"
            }).when("/intro", {
                templateUrl: "./controllers/introController/intro.html"
            }).when("/help", {
                templateUrl: "./directives/help.html"
            }).when("/login", {
                templateUrl: "./controllers/loginController/login.html"
            }).when("/register", {
                templateUrl: "./controllers/loginController/register.html"
            }).when("/password", {
                templateUrl: "./controllers/loginController/password.html"
            }).when("/user", {
                templateUrl: "./controllers/userController/user.html"
            }).when("/user/:param", {
                templateUrl: "./controllers/userController/user.html",
                controller: 'userController'
            }).when("/me", {
                templateUrl: "./controllers/userController/me.html"
            }).when("/event", {
                templateUrl: "./controllers/eventController/event.html"
            }).when("/addEvent", {
                templateUrl: "./controllers/eventController/addEvent.html"
            }).when("/location", {
                templateUrl: "./controllers/locationController/location.html"
            }).otherwise({
                redirectTo: "/intro"
            });
    });

    app.directive("searchresult", function () {
        return {
            restrict: 'E',
            templateUrl: 'directives/searchResult.html'
        };
    });

    app.service('sharedProperties', function () {
        var property = 'First';

        return {
            getProperty: function () {
                return property;
            },
            setProperty: function (value) {
                property = value;
            }
        };
    });

})();

/**
 * Created by Jonatan on 6/12/2015.
 */

(function () {
    "use strict";

    var adminController = function ($scope) {

    };

    angular.module("geofeelings").controller("adminController", ["$scope", adminController]);
})();
/**
 * Created by Jonatan on 1/12/2015.
 */

(function () {
    "use strict";

    var introController = function ($scope, $http) {


        //SMILEY TEKENEN
        $scope.sliderValue = 50;
        $scope.moodWord = null;
        var c = document.getElementById("smileyCanvas");
        var ctx = c.getContext("2d");

        //telkens slidervalue verandert gezichtje tekenen
        $scope.$watch("sliderValue", function (newValue, oldValue) {
            ctx.clearRect(0, 0, c.width, c.height); //canvas clearen voor nieuw frame

            var mood = $scope.sliderValue;
            giveMoodWord();
            //offset positie mond
            var offsetX = c.width/5;
            var offSetY = c.width/2.14 + (mood / (c.width/6));

            //variabelen voor beziercurve (= mond)
            var SPx = offsetX;
            var SPy = offSetY + 100 - (mood / 10 * 8);
            var H1x = offsetX;
            var H1y = offSetY + (mood / 10 * 12);
            var H2x = offsetX + 180;
            var H2y = offSetY + (mood / 10 * 12);
            var EPx = offsetX + (c.width/1.666);
            var EPy = offSetY + 100 - (mood / 10 * 8);

            //rood en groen bereken voor achtergrond hoofd
            var bgR = Math.round(170 - (mood / 100) * 170);
            var bgG = Math.round(mood / 100 * 132);

            //hoofd
            ctx.lineWidth = c.width/60;
            ctx.beginPath();
            ctx.arc((c.width/2), (c.width/2), (c.width/2.07), 0, 2 * Math.PI);
            ctx.fillStyle = "rgb(" + bgR + "," + bgG + ",0)";
            ctx.fill();
            ctx.stroke();

            //mond

            ctx.lineWidth = c.width/30;
            ctx.beginPath();
            ctx.moveTo(SPx, SPy);
            ctx.bezierCurveTo(H1x, H1y, H2x, H2y, EPx, EPy);
            ctx.stroke();
            ctx.lineCap = "round";

            //oog links

            ctx.lineWidth = c.width/60;
            ctx.beginPath();
            ctx.arc(c.width/3, c.width/3, c.width/15, 0, 2 * Math.PI);
            ctx.fillStyle = 'black';
            ctx.fill();
            ctx.stroke();

            //oog rechts
            ctx.beginPath();
            ctx.arc(c.width/3*2, c.width/3, c.width/15, 0, 2 * Math.PI);
            ctx.fillStyle = 'black';
            ctx.fill();
            ctx.stroke();
        });

        var moodwords = ["horrible", "really bad", "bad", "okay", "good", "really good", "excellent"];

        var giveMoodWord = function () {
            if ($scope.sliderValue < 5) {
                $scope.moodWord = moodwords[0];
            }
            else if ($scope.sliderValue < 25) {
                $scope.moodWord = moodwords[1];
            }
            else if ($scope.sliderValue < 40) {
                $scope.moodWord = moodwords[2];
            }
            else if ($scope.sliderValue < 60) {
                $scope.moodWord = moodwords[3];
            }
            else if ($scope.sliderValue < 75) {
                $scope.moodWord = moodwords[4];
            }
            else if ($scope.sliderValue < 95) {
                $scope.moodWord = moodwords[5];
            }
            else {
                $scope.moodWord = moodwords[6];
            }
        };

        $scope.postShare = function () {
            var data = { "userid": 0, "eventid": 0,"time":Date.now,"mood":$scope.sliderValue,"lat":0,"lng": 0};

            $http({
                url: 'http://localhost:3000/api/share',
                method: 'POST',
                data: data,
                headers: { 'Content-Type': 'application/json' }
            }).
                success(function (serverData) {
                    console.log("jow");
                    console.log("ServerData:", serverData);});

              /*
            $http.post(
                'http://localhost:3000/api/share',
                JSON.stringify(data),
                {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
            ).success(function (data) {
                    console.log("succes!");
                    $scope.person = data;
                });*/
        };
    };

    angular.module("geofeelings").controller("introController", ["$scope","$http", introController]);
})();
/**
 * Created by Jonatan on 4/12/2015.
 */


(function () {
    "use strict";

    var eventController = function ($scope) {

    };

    angular.module("geofeelings").controller("eventController", ["$scope", eventController]);
})();
/**
 * Created by Jonatan on 6/12/2015.
 */

(function () {
    "use strict";

    var locationController = function ($scope) {

    };

    angular.module("geofeelings").controller("locationController", ["$scope", locationController]);
})();
/**
 * Created by Jonatan on 26/11/2015.
 */

(function () {
    "use strict";

    var loginController = function ($scope, $http, $location) {
        $scope.login = function () {
            $http.post('/login', {
                username : this.username,
                password : this.password
            }).success(function (data) {
                $scope.error = data.error;
                $location.path(data.redirect);
            });
        };

        $scope.register = function() {
            $http.post('/register', {
                username : this.username,
                password : this.password,
                email : this.email
            }).success(function (data) {
                $scope.error = data.error;
                $location.path(data.redirect);
            });
        };
    };

    angular.module("geofeelings").controller("loginController", ["$scope", "$http", "$location", loginController]);
})();
/**
 * Created by Jonatan on 21/11/2015.
 */

(function () {
    "use strict";

    var mainController = function ($scope) {
        if (navigator.geolocation) {
            $scope.image = "./assets/common.png";
            $scope.mapOptions = {
                zoom: 15,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                disableDefaultUI: true
            };

            $scope.map = new google.maps.Map(document.querySelector("#map"), $scope.mapOptions);

            navigator.geolocation.getCurrentPosition(function (position) {
                $scope.map.setCenter(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));
                $scope.marker = new google.maps.Marker({
                    position: $scope.map.getCenter(),
                    map: $scope.map,
                    icon: $scope.image
                });
            });
        } else {
            //throw exception
        }
    };

    angular.module("geofeelings").controller("mainController", ["$scope", mainController]);
})();
/**
 * Created by Jonatan on 25/11/2015.
 */


(function () {
    "use strict";

    var searchController = function ($scope, searchService, sharedProperties) {

        $scope.searchModel = null;

        $scope.searchOnSubmit = function (formObj) {
            if ($scope.searchModel.length > 0) {
                searchNow();
            }
        };
        $scope.searchOnKeyPress = function () {
            if ($scope.searchModel !== null) {
                searchNow();
            }
        };

        $scope.filterSearchResults = function (i) {
            if ($scope.searchModel === "") {
                return false;
            }

            if (i.username.toLowerCase().indexOf($scope.searchModel.toLocaleLowerCase()) >= 0) {
                return true;
            }
            if (i.description !== undefined) {
                if (i.description.toLowerCase().indexOf($scope.searchModel.toLocaleLowerCase()) >= 0) {
                    return true;
                }
            }

            return false;
        };


        var searchNow = function () {
            searchService.search($scope.searchModel).then(onResultsReady);
        };

        var onResultsReady = function (res) {
            $scope.searchResults = res;
        };

        var onResultsError = function (err) {
        };
    };

    angular.module("geofeelings").controller("searchController", ["$scope", "searchService","sharedProperties", searchController]);
})();
/**
 * Created by Jonatan on 1/12/2015.
 */

(function () {
        "use strict";

        var userController = function ($scope, $location, searchService) {

            $scope.init = function () {
                var userid = $location.search().userid;
                searchService.searchUserFromId(userid).then(userFoundWithId);
               //searchService.getSharesByUserId(userid).then(sharesFoundWithId); //IMPLEMENTEREN ALS JONATAN DE API FTIE HEEFT AANGEMAAKT
            };

            var userFoundWithId = function (res) {
                    $scope.userfoundwithid = res;

                    if(res.lat !== undefined && res.lat!==undefined) {
                        $scope.map.setCenter(new google.maps.LatLng(res.lat, res.lng));
                        if ($scope.marker !== undefined) {
                            $scope.marker.setMap(null); //verwijdert alle markers eerst
                        }
                        $scope.marker = new google.maps.Marker({
                            position: {lat: res.lat, lng: res.lng},
                            map: $scope.map,
                            icon: $scope.image
                        });
                    }
                };

            var sharesFoundWithId = function (res) {

                $scope.shareFoundWithUserId = res;


                //markers plaatsen en kaart verplaatsen naar hun gemiddelde
                var minLat = 100,
                    maxLat = 0,
                    minLng = 100,
                    maxLng = 0,
                    teller = 0,
                    gemLat = 0,
                    gemLng = 0;

                $scope.marker.setMap(null); //verwijdert alle markers eerst
                res.forEach(function (res) {
                    teller++;
                    if (res.lat < minLat) {
                        minLat = res.lat;
                    }
                    else if (res.lat > maxLat) {
                        maxLat = res.lat;
                    }

                    if (res.lng < minLng) {
                        minLng = res.lng;
                    }
                    else if (res.lng > maxLng) {
                        maxLng = res.lng;
                    }

                    $scope.marker = new google.maps.Marker({
                        position: {lat: res.lat, lng: res.lng},
                        map: $scope.map,
                        icon: $scope.image
                    });

                });

                if (teller == 1) {
                    gemLat = res[0].lat;
                    gemLng = res[0].lng;
                }
                else {
                    gemLat = (maxLat - minLat) / 2 + minLat;
                    gemLng = (maxLng - minLng) / 2 + minLng;
                }

                $scope.map.setCenter(new google.maps.LatLng(gemLat, gemLng));
                $scope.map.setZoom(12);
                //klaar met markers plaatsen en kaart verplaatsen naar hun gemiddelde
            };
        };

        angular.module("geofeelings").controller("userController", ["$scope", "$location", "searchService", userController]);
    })
();
(function () {
    "use strict";

    var searchService = function ($http) {

        var search = function (searchString) {
            var url = 'http://localhost:3000/api/users';
            return $http.get(url).then(function (response) {

                var arSearchResults = [];
                angular.forEach(response.data, function (searchR) {
                    var newSR = new SearchResult(searchR._id, searchR.username);
                    arSearchResults.push(newSR);
                });
                return arSearchResults;
            });
        };

        var searchUserFromId = function (searchString) {
            var url = 'http://localhost:3000/api/user/' + searchString;
            return $http.get(url).then(function (response) {
                return new GfUser(
                    response.data._id,
                    response.data.username,
                    response.data.email,
                    response.data.userimage,
                    response.data.age,
                    response.data.lat,
                    response.data.lng,
                    response.data.chat,
                    response.data.admin
                );

            });
        };

        var getSharesByUserId = function (userid) {
            var url = 'http://localhost:3000/api/user/';
            return $http.get(url).then(function (response) {
                var sharesfound = [];
                angular.forEach(response.data.shares.share, function (share) {
                    if (share.userid == userid) {
                        var newShare = new GFShare(share._id.$oid, share.user, share.userid, share.time.$date, share.mood, share.lat, share.lng);
                        sharesfound.push(newShare);
                    }
                });
                return sharesfound;
            });
        };

        return {
            search: search,
            searchUserFromId: searchUserFromId,
            getSharesByUserId: getSharesByUserId
        };
    };
    angular.module("geofeelings").factory("searchService", ["$http", searchService]);
})();
function GFShare(id, userid, eventid, time, mood, lat, lng) {
    this.id = id;
    this.user = user;
    this.userid = userid;
    this.eventid = eventid;
    this.time = time;
    this.mood = mood;
    this.lat = lat;
    this.lng = lng;
}
GFShare.prototype.toString = function () {
    return this.user + " (" + this.time + ")";
};

function GfUser(id, username, email, userimage, age, lat, lng, chat, admin) {
    this.id = id;
    this.username = username;
    this.email = email;
    this.userimage = userimage;
    this.age = age;
    this.lat = lat;
    this.lng = lng;
    this.chat = chat;
    this.admin = admin;
}
GfUser.prototype.toString = function () {
    return this.username;
};

function SearchResult(id,username)
{
    this.id = id;
    this.username = username;
}
SearchResult.prototype.toString = function() {
    return this.title;
};

/**
 * Created by Jonatan on 22/11/2015.
 */

//# sourceMappingURL=data:application/json;base64,
